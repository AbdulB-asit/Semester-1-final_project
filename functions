#include<iostream>
#include<iomanip>
using namespace std;

// Node structure for a linked list
struct node {
    int data;
    node* link;
};

// Function to make a new head node
void insert_beginning(node* &head, int x) {
    node* newNode = new node;
    newNode->data = x;
    newNode->link = head->link; // inserts a new node behind head
    head = newNode;
}
// Function to get the linked lists size
int size_determine(node* head) {
    int size = 1; // starting index is from 1 and not 0
    node* temp = head;
    while (temp->link != NULL) { //runs till the end of list
        size++;
        temp = temp->link;
    }
    return size;
}

// Function to insert a node at a specified position in the linked list
bool insert_at(node* &head, int pos, int size) {
    int x;

    if (pos == 0 or pos > size + 1) { //checks if the pos is outside of lists range
        cout << "This position doesn't exist in the list.\n\n";
        return false;
    }

    cout << "Enter the number: ";
    cin >> x;
    node* temp = head;
    node* newNode = new node;
    newNode->data = x;
    newNode->link = NULL;

    if (pos == 1) { //directly inserts behind previous head
        newNode->link = temp;
        head= newNode;
        return true;
    }

    pos--;//computer indexes run from 0 so reduce the entered pos by 1
    while (pos != 1) { // Runs till reaching the pos in list
        temp = temp->link;
        pos--;
    }
    newNode->link = temp->link;
    temp->link = newNode;

    return true;
}

// Function to insert a node at the end of the linked list
void insert_end(node* head, int x) {
    node* newNode = new node;
    newNode->data = x;
    if (head->link == NULL) { // if list only has head
        newNode->link = NULL;
        head->link = newNode;
    } else {
        while (head->link != NULL) {// runs till the end of list
            head = head->link;
        }
        head->link = newNode;
        newNode->link = NULL;
    }
}

// Function to delete the last node in the linked list
void del_end(node* &head) {
    if (head->link == NULL) {// if head is the only element in list
        delete head;
    }
    node* sec_last = head;
    while (sec_last->link->link != NULL) {// runs till the end of list
        sec_last = sec_last->link;
    }
    delete(sec_last->link);
    sec_last->link = NULL;
}

// Function to delete the first node in the linked list
void del_head(node* &head) {
        node* temp = head;
        head= head->link;
        delete temp;
}

// Function to delete a node at a user specified position in the linked list
void del_at(node*& head, int pos) {
    node* prev = head;
    node* curr = head;
    if (pos == 1) { // deletes the head node
        head = curr->link;
        curr->link = NULL;
        curr = NULL;
        delete (curr);
        return;
    }

    node* temp = head;
    for (int i = 1; i < pos - 1; ++i) {// runs till the specified pos in list
        if (temp->link != NULL)
            temp = temp->link;
    }
    if (temp->link == NULL) {
        cout << "Invalid position for deletion." << endl;
    }

    node* val = temp->link;
    temp->link = val->link;
    delete (val);
}

// Function to delete a node with the user specificied data value in the linked list
void del_data(node*& head, int val) {
    if (head->data == val) { //head has the specified val for deletion
        node* temp = head;
        head = head->link;
        delete temp;
        return;
    }
    node* num = head;
    while (num->link != NULL && num->link->data != val) {// else move through list to find it
        num = num->link;
    }
    if (num->link == NULL) {// if val not found in list
        cout << "Value not found in the list." << endl;
        return;
    }
    node* temp = num->link;
    num->link = temp->link;
    delete temp;
}

// Function to search for a node with a user specificied data value in the linked list
node* search(node* head, int find) {
    int count = 1;
    if (head->data == find) { //head has the specified val(find)
        cout << "The number " << find << " is found at position #" << count << " of the list.\n\n";
        return head;
    }
    while (head->data != find && head->link != NULL) {// else move through list to find it
        count++;

        head = head->link;
    }

    if (head->data != find and head->link == NULL) {// if val not found in list
        cout << "The number " << find << " is not found in the list.\n\n";
        return head;
    }

    cout << "The number " << find << " is found at position #" << count << " of the list.\n\n";

    return head;
}

// Function copy to search for the value user needs to update in update_nodeNum function
node* search_update(node* head, int find) {
    int count = 1;

    if (head->data == find) {
        return head;
    }
    while (head->data != find && head->link != NULL) {
        count++;
        head = head->link;
    }

    if (head->data != find and head->link == NULL) {
        cout << "The number " << find << " is not found in the list.\n\n";
        return head;
    }
    return head;
}

// Function to sort the linked list in ascending order
void sort(node* head) {
    if (head->link == NULL || head == NULL) {// only head is in list
        return;
    }
        //bubble sort method to sort the list
    node* nextNode = NULL;
    while (head->link != NULL) {
        nextNode = head->link;
        while (nextNode != NULL) {
            if (head->data > nextNode->data) {
                int temp = head->data;
                head->data = nextNode->data;
                nextNode->data = temp;
            }
            nextNode = nextNode->link;
        }
        head = head->link;
    }
}

// Function to reverse the linked list
void reverse(node*& head) { // & used as calls the list by ref
    node *prev = NULL, *next = NULL;

    while (head != NULL) {
        next = head->link;
        head->link = prev; // changes the direction of pointer/node
        prev = head;
        head = next;
    }
    head = prev; // set the now first value as head
}

// Function to traverse and print the linked list
void traverse(node* head) {
    cout << "\n\n";
    while (head->link != NULL) {
        cout << "|" << head->data << "|" << "  ";
        head = head->link;
    }
    cout << "|" << head->data << "|" << "  ";
    return;
}
//Function to change a user specified date within a node
bool update_nodeNum(node* head, int Find) {
    int n;
    cout << "Enter the number: ";
    cin >> n;
        head = search_update(head, Find);// use the search function to find the specific value
    head->data = n;

    return true;
}
// Function to swap the values between 2 nodes chosen by user
bool swap(node* head, int pos1, int pos2) {
    node* temp1 = head;
    node* temp2 = head;
    if (pos1 == pos2) {// check if both positions are same
        cout << "\n Both positions can't be the same \n";
        return false;
    }
    for (int i = 1; i < pos1; ++i) {// run till the specific pos
        if (temp1->link != NULL) {
            temp1 = temp1->link;
        }
    }

    for (int i = 1; i < pos2; ++i) {// run till the specific pos
        if (temp2->link != NULL) {
            temp2 = temp2->link;
        }
    }
    int temp;
    temp = temp1->data;
    temp1->data = temp2->data;
    temp2->data = temp;
    return true;
}